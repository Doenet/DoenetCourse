(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[25,30],{

/***/ 496:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return useDoenetRenderer; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

 //Renderers will need to set doenetPropsForChildren locally and pass it along. 
//Renderer can change it later and values will be here

function useDoenetRenderer(props) {
  var initializeChildrenOnConstruction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var doenetPropsForChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__["useState"])(0),
      _useState2 = _slicedToArray(_useState, 2),
      updateCount = _useState2[0],
      setUpdateCount = _useState2[1];

  var stateValues = props.componentInstructions.stateValues;
  var actions = props.componentInstructions.actions;
  var children = [];
  var name = props.componentInstructions.componentName; // console.log("updateCount",updateCount)

  props.rendererUpdateMethods[name] = {
    update: function update() {
      setUpdateCount(updateCount + 1);
    },
    addChildren: addChildren,
    removeChildren: removeChildren,
    swapChildren: swapChildren
  };

  function addChildren(instruction) {
    var childInstructions = this.childrenToCreate[instruction.indexForParent];
    var child = this.createChildFromInstructions(childInstructions);
    children.splice(instruction.indexForParent, 0, child);
    children = _toConsumableArray(this.children); // needed for React to recognize it's different

    setUpdateCount(updateCount + 1);
  }

  function removeChildren(instruction) {
    children.splice(instruction.firstIndexInParent, instruction.numberChildrenDeleted);
    children = _toConsumableArray(children); // needed for React to recognize it's different

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = instruction.deletedComponentNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var componentName = _step.value;
        delete props.rendererUpdateMethods[componentName];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    setUpdateCount(updateCount + 1);
  }

  function swapChildren(instruction) {
    var _ref = [children[instruction.index2], children[instruction.index1]];
    children[instruction.index1] = _ref[0];
    children[instruction.index2] = _ref[1];
    children = _toConsumableArray(children); // needed for React to recognize it's different

    setUpdateCount(updateCount + 1);
  }

  if (initializeChildrenOnConstruction) {
    initializeChildren();
  }

  function initializeChildren() {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = props.componentInstructions.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var childInstructions = _step2.value;
        var child = createChildFromInstructions(childInstructions);
        children.push(child);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return children;
  }

  function createChildFromInstructions(childInstructions) {
    var propsForChild = {
      key: childInstructions.componentName,
      componentInstructions: childInstructions,
      rendererClasses: props.rendererClasses,
      rendererUpdateMethods: props.rendererUpdateMethods,
      flags: props.flags
    };
    Object.assign(propsForChild, doenetPropsForChildren);
    var child = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(props.rendererClasses[childInstructions.rendererType], propsForChild);
    return child;
  }

  function updatesetDoenetPropsForChildren(props) {
    setDoenetPropsForChildren(props);
  }

  return [name, stateValues, actions, children, initializeChildren, updatesetDoenetPropsForChildren];
}

/***/ }),

/***/ 521:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Slider; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _useDoenetRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(496);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

 // import DoenetRenderer from './DoenetRenderer';
// import styled from "styled-components";


function Slider(props) {
  var _useDoenetRender = Object(_useDoenetRenderer__WEBPACK_IMPORTED_MODULE_1__["default"])(props),
      _useDoenetRender2 = _slicedToArray(_useDoenetRender, 3),
      name = _useDoenetRender2[0],
      SVs = _useDoenetRender2[1],
      actions = _useDoenetRender2[2]; // let [handlePos,setHandlePos] = useState(100);


  if (SVs.hide) {
    return null;
  }

  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, " ", name, "'s Slider Value ", SVs.items[SVs.index], " "), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    onClick: function onClick() {
      return actions.changeValue({
        value: SVs.items[SVs.index - 1]
      });
    }
  }, "Prev"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button", {
    onClick: function onClick() {
      return actions.changeValue({
        value: SVs.items[SVs.index + 1]
      });
    }
  }, "Next"));
}
{}
/* 
<slider>
<number>1</number>
<number>2</number>
<number>3</number>
</slider>

<slider>
<text>cat</text>
<text>dog</text>
<text>mouse</text>
</slider>
<slider>
<sequence>
<from>-10</from>
<to>10</to>
<step>2</step>
</sequence>
</slider> 
*/
// export default class Slider extends DoenetRenderer {
//   constructor(props) {
//     super(props);
//     this.handleInput = this.handleInput.bind(this);
//     this.state = {
//     }
//     console.log("this.doenetSvData");
//     console.log(this.doenetSvData);
//     // console.log(this.doenetSvData.items)
//     // console.log(this.doenetSvData.index)
//     // console.log(this.doenetSvData.sliderType);
//     // console.log(this.actions);
//     // console.log(props.rendererUpdateMethods[this.componentName])
//   }
//   handleInput(e, inputState) {
//   }
//   render() {
//     console.log('RENDER')
//     if (this.doenetSvData.hide) {
//       return null;
//     }
//     console.log("Current Value")
//     console.log(this.doenetSvData.items[this.doenetSvData.index]);
//     return (
//       <>
//         <div> {this.componentName}'s Slider Value {this.doenetSvData.items[this.doenetSvData.index]} </div>
//         <button onClick={() => this.actions.changeValue({ value: this.doenetSvData.items[this.doenetSvData.index - 1] })}>Prev</button>
//         <button onClick={() => this.actions.changeValue({ value: this.doenetSvData.items[this.doenetSvData.index + 1] })}>Next</button>
//       </>
//     );
//   }
// }

/***/ })

}]);